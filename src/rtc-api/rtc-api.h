#ifndef POMELO_PLUGIN_WEBRTC_RTC_API_H
#define POMELO_PLUGIN_WEBRTC_RTC_API_H
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif


typedef enum {
	RTC_PEER_CONNECTION_STATE_NEW = 0,
	RTC_PEER_CONNECTION_STATE_CONNECTING = 1,
	RTC_PEER_CONNECTION_STATE_CONNECTED = 2,
	RTC_PEER_CONNECTION_STATE_DISCONNECTED = 3,
	RTC_PEER_CONNECTION_STATE_FAILED = 4,
	RTC_PEER_CONNECTION_STATE_CLOSED = 5
} rtc_peer_connection_state;


typedef enum {
	RTC_CERTIFICATE_TYPE_DEFAULT, // ECDSA
	RTC_CERTIFICATE_TYPE_ECDSA,
	RTC_CERTIFICATE_TYPE_RSA,
} rtc_certificate_type;


typedef enum {
    RTC_ICE_TRANSPORT_POLICY_ALL,
    RTC_ICE_TRANSPORT_POLICY_RELAY
} rtc_ice_transport_policy;

typedef enum {
    RTC_LOG_LEVEL_NONE,
    RTC_LOG_LEVEL_FATAL,
    RTC_LOG_LEVEL_ERROR,
    RTC_LOG_LEVEL_WARNING,
    RTC_LOG_LEVEL_INFO,
    RTC_LOG_LEVEL_DEBUG,
    RTC_LOG_LEVEL_VERBOSE
} rtc_log_level;

typedef struct rtc_websocket_server_s rtc_websocket_server_t;
typedef struct rtc_websocket_client_s rtc_websocket_client_t;
typedef struct rtc_peer_connection_s rtc_peer_connection_t;
typedef struct rtc_data_channel_s rtc_data_channel_t;
typedef struct rtc_buffer_s rtc_buffer_t;
typedef struct rtc_context_s rtc_context_t;

typedef struct rtc_options_s rtc_options_t;
typedef struct rtc_websocket_server_options_s rtc_websocket_server_options_t;
typedef struct rtc_peer_connection_options_s rtc_peer_connection_options_t;
typedef struct rtc_data_channel_options_s rtc_data_channel_options_t;
typedef struct rtc_data_channel_reliability_s rtc_data_channel_reliability_t;

typedef void (*rtc_log_callback)(rtc_log_level level, const char * message);

typedef void (*rtc_websocket_server_callback)(
    rtc_websocket_server_t * ws_server,
    rtc_websocket_client_t * ws_client
);

typedef void (*rtc_peer_connection_local_description_callback)(
    rtc_peer_connection_t * pc,
    rtc_buffer_t * sdp,
    rtc_buffer_t * type
);

typedef void (*rtc_peer_connection_local_candidate_callback)(
    rtc_peer_connection_t * pc,
    rtc_buffer_t * cand,
    rtc_buffer_t * mid
);

typedef void (*rtc_peer_connection_state_change_callback)(
    rtc_peer_connection_t * pc,
    rtc_peer_connection_state state
);

typedef void (*rtc_peer_connection_data_channel_callback)(
    rtc_peer_connection_t * pc,
    rtc_data_channel_t * dc
);

typedef void (*rtc_websocket_client_open_callback)(
    rtc_websocket_client_t * wsc
);

typedef void (*rtc_websocket_client_closed_callback)(
    rtc_websocket_client_t * wsc
);

typedef void (*rtc_websocket_client_error_callback)(
    rtc_websocket_client_t * wsc,
    const char * error
);

typedef void (*rtc_websocket_client_message_callback)(
    rtc_websocket_client_t * wsc,
    rtc_buffer_t * message
);

typedef void (*rtc_data_channel_open_callback)(rtc_data_channel_t * dc);

typedef void (*rtc_data_channel_closed_callback)(rtc_data_channel_t * dc);

typedef void (*rtc_data_channel_error_callback)(
    rtc_data_channel_t * dc,
    const char * error
);

typedef void (*rtc_data_channel_message_callback)(
    rtc_data_channel_t * dc,
    rtc_buffer_t * message
);


struct rtc_options_s {
    /* Log settings */
    rtc_log_level log_level;
    rtc_log_callback log_callback;

    /* Callback for websocket server */
    rtc_websocket_server_callback wss_client_callback;

    /* Callback for websocket client */
    rtc_websocket_client_open_callback ws_open_callback;
    rtc_websocket_client_closed_callback ws_closed_callback;
    rtc_websocket_client_error_callback ws_error_callback;
    rtc_websocket_client_message_callback ws_message_callback;
    
    /* Callbacks for peer connection */
    rtc_peer_connection_local_candidate_callback pc_local_candidate_callback;
    rtc_peer_connection_state_change_callback pc_state_change_callback;
    rtc_peer_connection_data_channel_callback pc_data_channel_callback;

    /* Callbacks for data channels */
    rtc_data_channel_open_callback dc_open_callback;
    rtc_data_channel_closed_callback dc_closed_callback;
    rtc_data_channel_error_callback dc_error_callback;
    rtc_data_channel_message_callback dc_message_callback;
};


struct rtc_websocket_server_options_s {
    /// @brief Context
    rtc_context_t * context;

    /// @brief Initial private data
    void * data;

    /* Configuration */

    uint16_t port;                     // 0 means automatic selection
    bool enable_tls;                   // if true, enable TLS (WSS)
    const char * certificate_pem_file; // NULL for autogenerated certificate
    const char * key_pem_file;         // NULL for autogenerated certificate
    const char * key_pem_pass;         // NULL if no pass
    const char * bind_address;         // NULL for any
    int connection_timeout_ms;         // in milliseconds, 0 means default, < 0 means disabled
    int max_message_size;              // <= 0 means default
};


struct rtc_peer_connection_options_s {
    /// @brief Context
    rtc_context_t * context;

    /// @brief Initial private data
    void * data;

    /* Configuration */

    const char ** ice_servers;
    int ice_servers_count;
    const char * proxy_server;   // libnice only
    const char * bind_address;   // libjuice only, NULL means any
    rtc_certificate_type certificate_type;
    rtc_ice_transport_policy ice_transport_policy;
    bool enable_ice_tcp;         // libnice only
    bool enable_ice_udp_mux;     // libjuice only
    bool force_media_transport;
    uint16_t port_range_begin;   // 0 means automatic
    uint16_t port_range_end;     // 0 means automatic
    int mtu;                     // <= 0 means automatic
    int max_message_size;        // <= 0 means default
};


struct rtc_data_channel_reliability_s {
    bool unordered;
	bool unreliable;
	unsigned int maxPacketLifeTime; // ignored if reliable
	unsigned int maxRetransmits;    // ignored if reliable
};


struct rtc_data_channel_options_s {
    /// @brief Label of channel
    const char * label;

    /// @brief Private data
    void * data;

    /* Configuration */

    rtc_data_channel_reliability_t reliability;
	const char * protocol; // empty string if NULL
	bool negotiated;
	bool manualStream;
	uint16_t stream; // numeric ID 0-65534, ignored if manualStream is false
};


/* -------------------------------------------------------------------------- */
/*                               Common APIs                                  */
/* -------------------------------------------------------------------------- */

/// @brief Create new RTC context
rtc_context_t * rtc_context_create(rtc_options_t * options);

/// @brief Destroy a RTC context
void rtc_context_destroy(rtc_context_t * context);

/// @brief Set RTC context data
void rtc_context_set_data(rtc_context_t * context, void * data);

/// @brief Get RTC context data
void * rtc_context_get_data(rtc_context_t * context);


/* -------------------------------------------------------------------------- */
/*                          Websocket Server APIs                             */
/* -------------------------------------------------------------------------- */

/// @brief Initialize websocket server options
void rtc_websocket_server_options_init(
    rtc_websocket_server_options_t * options
);

/// @brief Create new websocket server
/// @return Websocket server or NULL on failed
rtc_websocket_server_t * rtc_websocket_server_create(
    rtc_websocket_server_options_t * options
);

/// @brief Close the WSS server
void rtc_websocket_server_close(rtc_websocket_server_t * wss);

/// @brief Destroy websocket server
void rtc_websocket_server_destroy(rtc_websocket_server_t * wss);

/// @brief Set private data for websocket server
void rtc_websocket_server_set_data(rtc_websocket_server_t * wss, void * data);

/// @brief Get private data of websocket server
void * rtc_websocket_server_get_data(rtc_websocket_server_t * wss);

/// @brief Get context
rtc_context_t * rtc_websocket_server_get_context(rtc_websocket_server_t * wss);


/* -------------------------------------------------------------------------- */
/*                          Websocket Client APIs                             */
/* -------------------------------------------------------------------------- */

/// @brief Set private data for websocket client
void rtc_websocket_client_set_data(rtc_websocket_client_t * wsc, void * data);

/// @brief Get private data of websocket client
void * rtc_websocket_client_get_data(rtc_websocket_client_t * wsc);

/// @brief Close the websocket client
void rtc_websocket_client_close(rtc_websocket_client_t * wsc);

/// @brief Destroy the websocket client
void rtc_websocket_client_destroy(rtc_websocket_client_t * wsc);

/// @brief Get remote address of websocket
void rtc_websocket_client_remote_address(
    rtc_websocket_client_t * wsc,
    char * buffer,
    int size
);

/// @brief Send string message over websocket
/// @return 0 on success or -1 on failure
int rtc_websocket_client_send_string(
    rtc_websocket_client_t * wsc,
    const char * message
);

/// @brief Send binary message over websocket
/// @return 0 on success or -1 on failure
int rtc_websocket_client_send_binary(
    rtc_websocket_client_t * wsc,
    const uint8_t * message,
    size_t length
);

/// @brief Get context
rtc_context_t * rtc_websocket_client_get_context(rtc_websocket_client_t * wsc);


/* -------------------------------------------------------------------------- */
/*                           Peer Connection APIs                             */
/* -------------------------------------------------------------------------- */

/// @brief Initialize peer connection creating options
void rtc_peer_connection_options_init(rtc_peer_connection_options_t * options);

/// @brief Create new peer connection
rtc_peer_connection_t * rtc_peer_connection_create(
    rtc_peer_connection_options_t * options
);

/// @brief Destroy peer connection
void rtc_peer_connection_destroy(rtc_peer_connection_t * pc);

/// @brief Close peer connection
void rtc_peer_connection_close(rtc_peer_connection_t * pc);

/// @brief Set private data for websocket client
void rtc_peer_connection_set_data(rtc_peer_connection_t * pc, void * data);

/// @brief Get private data of websocket client
void * rtc_peer_connection_get_data(rtc_peer_connection_t * pc);

/// @brief Get remote address of websocket
void rtc_peer_connection_remote_address(
    rtc_peer_connection_t * pc,
    char * buffer,
    int size
);

/// @brief Create data channel
rtc_data_channel_t * rtc_peer_connection_create_data_channel(
    rtc_peer_connection_t * pc,
    rtc_data_channel_options_t * options
);

/// @brief Set local description. SDP and Type can be NULL.
void rtc_peer_connection_set_local_description(
    rtc_peer_connection_t * pc,
    const char * type
);

/// @brief Get type of local description
const char * rtc_peer_connection_get_local_description_type(
    rtc_peer_connection_t * pc
);

/// @brief Get SDP of local description
const char * rtc_peer_connection_get_local_description_sdp(
    rtc_peer_connection_t * pc
);

/// @brief Set remote description
void rtc_peer_connection_set_remote_description(
    rtc_peer_connection_t * pc,
    const char * sdp,
    const char * type
);

/// @brief Add remote candidate
void rtc_peer_connection_add_remote_candidate(
    rtc_peer_connection_t * pc,
    const char * cand,
    const char * mid
);

/// @brief Get context
rtc_context_t * rtc_peer_connection_get_context(rtc_peer_connection_t * pc);


/* -------------------------------------------------------------------------- */
/*                            Data channel APIs                               */
/* -------------------------------------------------------------------------- */

/// @brief Initialize data channel options
void rtc_data_channel_options_init(rtc_data_channel_options_t * options);

/// @brief Destroy the data channel
void rtc_data_channel_destroy(rtc_data_channel_t * dc);

/// @brief Close the data channel
void rtc_data_channel_close(rtc_data_channel_t * dc);

/// @brief Set private data for websocket client
void rtc_data_channel_set_data(rtc_data_channel_t * dc, void * data);

/// @brief Get private data of websocket client
void * rtc_data_channel_get_data(rtc_data_channel_t * dc);

/// @brief Send a message through data channel
int rtc_data_channel_send(
    rtc_data_channel_t * dc,
    const uint8_t * message,
    size_t length
);

/// @brief Send a buffer through data channel
int rtc_data_channel_send_buffer(
    rtc_data_channel_t * dc,
    rtc_buffer_t * buffer
);

/// @brief Get context
rtc_context_t * rtc_data_channel_get_context(rtc_data_channel_t * dc);

/// @brief Check if data is open
bool rtc_data_channel_is_open(rtc_data_channel_t * dc);

/// @brief Get label of data channel
const char * rtc_data_channel_get_label(rtc_data_channel_t * dc);

/* -------------------------------------------------------------------------- */
/*                          Readonly Buffer APIs                              */
/* -------------------------------------------------------------------------- */

/// @brief Get size of buffer
size_t rtc_buffer_size(rtc_buffer_t * buffer);

/// @brief Get data of buffer
const uint8_t * rtc_buffer_data(rtc_buffer_t * buffer);

/// @brief Increase reference of buffer
void rtc_buffer_ref(rtc_buffer_t * buffer);

/// @brief Decrease reference of buffer
void rtc_buffer_unref(rtc_buffer_t * buffer);

/// @brief Prepare new buffer
rtc_buffer_t * rtc_buffer_prepare(
    rtc_context_t * context,
    size_t capacity,
    uint8_t ** data
);

/// @brief Get context
rtc_context_t * rtc_buffer_get_context(rtc_context_t * buffer);


#ifdef __cplusplus
}
#endif
#endif // POMELO_PLUGIN_WEBRTC_RTC_API_H
